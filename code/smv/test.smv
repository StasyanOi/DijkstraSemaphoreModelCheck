MODULE main
 VAR
   semaphore : {0,1,2,3,4,5,6,7,8,9,10};
   proc1     : process user(semaphore);
   proc2     : process user(semaphore);
   proc3     : process user(semaphore);
   proc4     : process user(semaphore);
   proc5     : process user(semaphore);
 ASSIGN
   init(semaphore) := 1;

LTLSPEC  (! F (proc1.state = critical & proc2.state = critical & proc3.state != critical & proc4.state != critical & proc5.state != critical))



MODULE user(semaphore)
 VAR
   next  : boolean;
   state : {idle, enqueue, critical, exiting};
 ASSIGN
   init(next) := FALSE;
   init(state) := idle;
   next(state) :=
     case
       state = idle                                          : enqueue;
       state = enqueue & semaphore > 0                       : critical;
       state = critical                                      : exiting;
       state = exiting                                       : idle;
       TRUE                                                  : state;
     esac;
   next(semaphore) :=
     case
       state = enqueue & semaphore > 0  : semaphore-1;
       state = exiting & semaphore < 1  : semaphore+1;
       TRUE                             : semaphore;
     esac;

 FAIRNESS
   running